{"version":3,"sources":["images/wallet.png","actions/index.js","pages/Login/index.js","Components/TagSelect.js","Components/BuyForm.js","Components/TableItem.js","Components/Table.js","pages/Wallet/index.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store.js","index.js"],"names":["module","exports","addExpenseAction","payload","type","logginIn","Login","props","state","email","password","emailAutentication","passwordAutentication","handleData","bind","checkStateEmail","checkStatePassword","event","target","name","value","this","setState","includes","length","logActionStore","history","className","src","wallet","alt","action","htmlFor","onChange","data-testid","disabled","onClick","push","React","Component","connect","dispatch","TagSelect","id","BuyForm","currencies","form","description","currency","method","tag","actB","actE","fetchCurrencies","fetch","data","json","Object","keys","filter","prevState","act","editing","hand","d","console","log","map","sCurrency","key","isEditing","TableItem","expense","ask","exchangeRates","parseFloat","toFixed","edit","getValue","Table","expenses","remove","index","Wallet","headerCurrencyField","buttonAction","buttonActionEdit","obj","addExpenseFunction","editExpenseFunction","userState","total","totalFormated","Intl","NumberFormat","style","format","user","a","object","App","exact","path","component","Boolean","window","location","hostname","match","INNITIAL_STATE","logged","userReducer","editingObject","getExpenseValue","answer","walletReducer","reduce","acum","slice","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65d4c4a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallet.5ea122d6.png\";","// Coloque aqui suas actions\nconst logginIn = (payload) => ({\n  type: 'LOGIN_SUCCESS',\n  payload,\n});\n\nconst addExpenseAction = (payload) => ({\n  type: 'ADD_EXPENSE',\n  payload }\n);\n\nexport const removeExpenseAction = (payload) => ({\n  type: 'REMOVE_EXPENSE', payload,\n});\n\nexport const addExpense = (payload) => async (dispatch) => {\n  let data = await fetch('https://economia.awesomeapi.com.br/json/all');\n  data = await data.json();\n\n  const object = { ...payload, exchangeRates: data };\n\n  dispatch(\n    addExpenseAction(object),\n  );\n};\n\nexport const startEditing = (payload) => ({\n  type: 'START_EDITING', payload,\n});\n\nexport const endEditing = (payload) => ({\n  type: 'END_EDITING', payload,\n});\n\nexport default logginIn;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport logginIn from '../../actions';\n\nimport './loginStyle.css';\n\nimport wallet from '../../images/wallet.png';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: 'usuario@email.com',\n      password: 'Essaeumaboasenha!',\n      emailAutentication: true,\n      passwordAutentication: true,\n    };\n\n    this.handleData = this.handleData.bind(this);\n    this.checkStateEmail = this.checkStateEmail.bind(this);\n    this.checkStatePassword = this.checkStatePassword.bind(this);\n  }\n\n  // handleData = (event) => {\n  //   const { name, value } = event.target;\n  //   this.setState({\n  //     [name]: value,\n  //   });\n  // };\n\n  handleData(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      this.checkStateEmail();\n      this.checkStatePassword();\n    });\n  }\n\n  checkStateEmail() {\n    const { email } = this.state;\n    if (\n      email.includes('@')\n      && email.includes('.com')\n    ) {\n      this.setState({\n        emailAutentication: true,\n      });\n    } else {\n      this.setState({\n        emailAutentication: false,\n      });\n    }\n  }\n\n  checkStatePassword() {\n    const { password } = this.state;\n    const PASSWORD_LENGTH = 6;\n    if (\n      password.length >= PASSWORD_LENGTH\n\n    ) {\n      this.setState({\n        passwordAutentication: true,\n      });\n    } else {\n      this.setState({\n        passwordAutentication: false,\n      });\n    }\n  }\n\n  render() {\n    const { email, password, passwordAutentication, emailAutentication } = this.state;\n    const { logActionStore, history } = this.props;\n    const payload = {\n      email, password,\n    };\n    return (\n      <main className=\"login-main\">\n        <img src={ wallet } alt=\"Wallet\" className=\"wallet-img\" />\n        <form action=\"GET\" className=\"login-form\">\n          <label htmlFor=\"email\">\n            Email:\n            <input\n              type=\"text\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleData }\n              data-testid=\"email-input\"\n            />\n          </label>\n\n          <label htmlFor=\"password\">\n            Password:\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={ password }\n              onChange={ this.handleData }\n              data-testid=\"password-input\"\n            />\n          </label>\n\n          <button\n            type=\"button\"\n            disabled={ !(passwordAutentication && emailAutentication) }\n            onClick={ () => {\n              logActionStore(payload);\n              history.push('/carteira');\n            } }\n          >\n            Entrar\n\n          </button>\n\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispathToProps = (dispatch) => ({\n  logActionStore: (payload) => dispatch(logginIn(payload)),\n});\n\nLogin.propTypes = {\n  logActionStore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n\n};\n\nexport default connect(null, mapDispathToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TagSelect extends React.Component {\n  render() {\n    const { onChange, value } = this.props;\n    return (\n      <label htmlFor=\"tag\">\n        Tag\n        <select name=\"tag\" id=\"tag\" value={ value } onChange={ onChange }>\n          <option value=\"Comida\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Saúde\"> Saúde </option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nTagSelect.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default TagSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TagSelect from './TagSelect';\n\nimport './table-form-styles.css';\n\nclass BuyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currencies: [],\n      form: {\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Comida',\n      },\n    };\n    this.handleData = this.handleData.bind(this);\n    this.actB = this.actB.bind(this);\n    this.actE = this.actE.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchCurrencies();\n  }\n\n  async fetchCurrencies() {\n    const data = await fetch('https://economia.awesomeapi.com.br/json/all');\n    let currencies = await data.json();\n    currencies = Object.keys(currencies);\n    currencies = currencies.filter((currency) => currency !== 'USDT');\n    this.setState({\n      currencies,\n    });\n  }\n\n  handleData(event) {\n    const { value, name } = event.target;\n    this.setState((prevState) => ({\n      currencies: prevState.currencies,\n      form: {\n        ...prevState.form,\n        [name]: value,\n      },\n    }));\n  }\n\n  actB(form) {\n    const { act } = this.props;\n    act(form);\n    this.setState({\n      form: {\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Comida',\n      },\n    });\n  }\n\n  actE(form) {\n    const { actE } = this.props;\n    actE(form);\n    this.setState({\n      form: {\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Comida',\n      },\n    });\n  }\n\n  // eslint-disable-next-line max-lines-per-function\n  render() {\n    const { currencies, form } = this.state;\n    const { editing } = this.props;\n    const { value, description, currency, method, tag } = form;\n    const { actB, actE } = this;\n    const hand = this.handleData;\n    const d = 'description';\n    console.log(editing);\n    return (\n      currencies.length > 1\n        ? (\n          <form action=\"GET\" className=\"add-currency-form\">\n            <label htmlFor=\"value\">\n              Valor\n              <input id=\"value\" name=\"value\" value={ value } onChange={ hand } />\n            </label>\n            <label htmlFor={ d }>\n              Descrição:\n              <textarea name={ d } id={ d } value={ description } onChange={ hand } />\n            </label>\n            <label htmlFor=\"currency\">\n              Moeda:\n              <select name=\"currency\" id=\"currency\" value={ currency } onChange={ hand }>\n                {currencies.map((sCurrency) => (\n                  <option value={ sCurrency } key={ sCurrency }>\n                    {sCurrency}\n                  </option>))}\n              </select>\n            </label>\n            <label htmlFor=\"method\">\n              Método de pagamento\n              <select name=\"method\" id=\"method\" value={ method } onChange={ hand }>\n                <option value=\"Dinheiro\">Dinheiro</option>\n                <option value=\"Cartão de crédito\">Cartão de crédito</option>\n                <option value=\"Cartão de débito\">Cartão de débito</option>\n              </select>\n            </label>\n            <TagSelect value={ tag } onChange={ hand } />\n            {!editing && (\n              <button type=\"button\" onClick={ () => actB(form) }>\n                Adicionar despesa\n              </button>)}\n            {editing\n            && (\n              <button\n                type=\"button\"\n                onClick={ () => actE(form) }\n              >\n                Editar despesa\n              </button>)}\n          </form>)\n        : <p>Loading...</p>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  editing: state.wallet.editing.isEditing,\n});\n\nBuyForm.propTypes = {\n  act: PropTypes.func.isRequired,\n  actE: PropTypes.func.isRequired,\n  editing: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps)(BuyForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { startEditing } from '../actions';\n\nclass TableItem extends React.Component {\n  getValue(expense) {\n    const { value, exchangeRates, currency } = expense;\n    const { ask } = exchangeRates[currency];\n\n    const changed = parseFloat(ask) * parseFloat(value);\n    const answer = changed.toFixed(2);\n    return answer;\n  }\n\n  render() {\n    const { onClick, expense, edit } = this.props;\n    return (\n      <tr>\n        <td>{expense.description}</td>\n        <td>{expense.tag}</td>\n        <td>{expense.method}</td>\n        <td>{expense.value}</td>\n        <td>{expense.exchangeRates[expense.currency].name}</td>\n        <td>\n          {parseFloat(\n            expense.exchangeRates[expense.currency].ask,\n          ).toFixed(2)}\n        </td>\n        <td>{this.getValue(expense)}</td>\n        <td>Real</td>\n        <td>\n          <button\n            type=\"button\"\n            onClick={ onClick }\n            data-testid=\"delete-btn\"\n          >\n            Remove\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={ () => edit(expense) }\n            data-testid=\"edit-btn\"\n          >\n            Edit\n          </button>\n\n        </td>\n      </tr>\n    );\n  }\n}\n\nTableItem.propTypes = {\n  expense: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    exchangeRates: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  edit: (expense) => dispatch(startEditing(expense)),\n\n});\n\nexport default connect(null, mapDispatchToProps)(TableItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeExpenseAction } from '../actions';\nimport TableItem from './TableItem';\n\nimport './table-form-styles.css';\n\nclass Table extends React.Component {\n  getValue(expense) {\n    const { value, exchangeRates, currency } = expense;\n    const { ask } = exchangeRates[currency];\n\n    const changed = parseFloat(ask) * parseFloat(value);\n    const answer = changed.toFixed(2);\n    return answer;\n  }\n\n  render() {\n    const { expenses, remove } = this.props;\n    return (\n      <table className=\"currency-tables\">\n        <tbody>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n\n          {expenses.map((expense, index) => (\n            <TableItem\n              expense={ expense }\n              onClick={ () => remove(index) }\n              key={ expense.id }\n            />\n          ))}\n\n        </tbody>\n\n      </table>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  remove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  remove: (index) => dispatch(removeExpenseAction(index)),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport BuyForm from '../../Components/BuyForm';\nimport { addExpense, endEditing } from '../../actions';\nimport Table from '../../Components/Table';\n\nimport './wallet-styles.css';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      headerCurrencyField: 'BRL',\n    };\n    this.buttonAction = this.buttonAction.bind(this);\n    this.buttonActionEdit = this.buttonActionEdit.bind(this);\n  }\n\n  async buttonAction(obj) {\n    const { addExpenseFunction } = this.props;\n    addExpenseFunction(obj);\n  }\n\n  async buttonActionEdit(obj) {\n    const { editExpenseFunction } = this.props;\n    editExpenseFunction(obj);\n  }\n\n  render() {\n    const { userState, total } = this.props;\n    const { email } = userState;\n    const { headerCurrencyField } = this.state;\n    console.log(total);\n    const totalFormated = Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    }).format(total);\n    console.log(totalFormated);\n    return (\n      <main>\n        <header className=\"wallet-header\">\n          <div\n            data-testid=\"email-field\"\n            className=\"email-field\"\n          >\n            Email:\n            {email}\n          </div>\n          <div>\n            <p data-testid=\"total-field\">\n              {totalFormated || 'R$ 0,00'}\n            </p>\n            <p data-testid=\"header-currency-field\">{headerCurrencyField}</p>\n          </div>\n        </header>\n        <BuyForm act={ this.buttonAction } actE={ this.buttonActionEdit } />\n        <Table />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userState: state.user,\n  expenses: state.wallet.expenses,\n  total: state.wallet.total,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenseFunction: (obj) => { dispatch(addExpense(obj)); },\n  editExpenseFunction: (obj) => { dispatch(endEditing(obj)); },\n});\n\nWallet.propTypes = {\n  userState: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n\n  total: PropTypes.number.isRequired,\n  addExpenseFunction: PropTypes.func.isRequired,\n  editExpenseFunction: PropTypes.func.isRequired,\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/currency-wallet\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n\nconst INNITIAL_STATE = {\n  email: 'usuario@email.com',\n  password: 'Essaeumaboasenha!',\n  logged: false,\n};\n\nfunction userReducer(state = INNITIAL_STATE, action) {\n  switch (action.type) {\n  case 'LOGIN_SUCCESS':\n    return { ...state, ...action.payload, logged: true };\n\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n// Esse reducer será responsável por tratar as informações da pessoa usuária\n\nconst INNITIAL_STATE = {\n  expenses: [],\n  total: 0,\n  editing: {\n    isEditing: false,\n    editingObject: {},\n  },\n};\n\nconst getExpenseValue = (object) => {\n  const value = parseFloat(object.value);\n  let answer;\n  if (object.currency === 'BRL') {\n    answer = value;\n  } else {\n    const { currency } = object;\n    answer = value * parseFloat(object.exchangeRates[currency].ask);\n  }\n  answer = parseFloat(answer.toFixed(2));\n  return answer;\n};\n\nfunction walletReducer(state = INNITIAL_STATE, action) {\n  switch (action.type) {\n  case 'ADD_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses, { ...action.payload, id: state.expenses.length }],\n      total: state.expenses.reduce(\n        (acum, expense) => acum + getExpenseValue(expense), 0,\n      ) + getExpenseValue(action.payload),\n    };\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses.slice(0, action.payload),\n        ...state.expenses.slice(action.payload + 1)],\n      total: state.expenses.reduce(\n        (acum, expense) => acum + getExpenseValue(expense), 0,\n      ) - getExpenseValue(state.expenses[action.payload]),\n    };\n\n  case 'START_EDITING':\n    return {\n      ...state,\n      editing: {\n        isEditing: true,\n        editingObject: action.payload,\n      },\n    };\n\n  case 'END_EDITING':\n    return {\n      ...state,\n      expenses: [...state.expenses.slice(0, state.editing.editingObject.id),\n        { ...state.editing.editingObject, ...action.payload },\n        ...state.expenses.slice(state.editing.editingObject.id + 1)],\n      editing: {\n        isEditing: false,\n        editingObject: {},\n      },\n      total: state.total\n       + getExpenseValue({ ...state.editing.editingObject, ...action.payload })\n      - getExpenseValue(state.editing.editingObject),\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet,\n});\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}